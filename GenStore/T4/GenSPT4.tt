///
/// Generated by <#=ProgramName#>(MTP) on <#=DateTime.Now#>
///
<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="GenStore.Models" #>
using System;
using System.Data;
using System.Collections.Generic;
using Microsoft.Data.SqlClient;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using AgileObjects.AgileMapper;
using AutoMapper;

namespace <#=Namespace#>.<#=SolutionDestinationFolder#>
{
    public partial class <#=DestinationDbContext#> : <#=SourceDbContext#>
    {
        private readonly DBContext _dbContext;
<# foreach (var sp in SpList){ if (sp.Results.Count > 0) {#>
        public virtual DbSet<<#=sp.Name#>> <#=sp.Name#> { get; set; }
<# }}#>

        public <#=DestinationDbContext#>(DBContext dbContext)
        {
           _dbContext = dbContext;
        }

        public <#=DestinationDbContext#>(DbContextOptions<<#=SourceDbContext#>> options)
            : base(options)
        {
            // Database.SetCommandTimeout((int)TimeSpan.FromMinutes(10).TotalSeconds);
        }               

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {                                 
            // No key   
<#    foreach (var sp in SpList){ if (sp.Results.Count > 0){#>
            modelBuilder.Entity<<#=sp.Name#>>().HasNoKey().ToView(null);
<#    }}#>            
            base.OnModelCreating(modelBuilder);
        }
        // ====================================start services============================================
        #region xu ly ben services cach 1 dung FromSqlRaw || ExecuteSqlRawAsync
<# foreach (var sp in SpList){ #>
        <#=sp.GetMethodDefinition()#>_C1(<# foreach (var p in sp.Params){#><#=(p.Order == "1" ? "" : "," )#><#=(p.isOutput ? "ref " : "" )#><#=p.Type#> <#=p.Param#><#}#>)
        {
<#if (sp.Params.Count > 0) {#>
            // Parameters
<# foreach (var p in sp.Params){ #>
            SqlParameter p_<#=p.Param#> = new SqlParameter("@<#=p.Param#>", <#=p.Param#> ?? (object)DBNull.Value);
<# }#><#}#>           
            // Processing 
            string sqlQuery = $@"EXEC [<#=sp.Schema#>].[<#=sp.Name#>] <# foreach (var p in sp.Params){ #><#=(p.Order == "1" ? "" : ", " )#>@<#=p.Param#><#=(p.isOutput ? " OUTPUT" : "" )#><#}#>";
<#if (sp.Results.Count > 0) {#>
                
            //Output Data
            List<<#=sp.Name#>> listData = await _dbContext.<#=sp.Name#>.FromSqlRaw(sqlQuery <# foreach (var p in sp.Params){ #>, p_<#=p.Param#> <#}#>).ToListAsync();<#}#>
<#        else{#>
            //Execution
           await _dbContext.Database.ExecuteSqlRawAsync(sqlQuery <# foreach (var p in sp.Params){ #>, p_<#=p.Param#> <#}#>);<#}#>

<#if (sp.Params.Where(x=> x.isOutput).Count() > 0) {#>
                
            //Output Params
<# foreach (var p in sp.Params.Where(x=> x.isOutput)){ #>                <#=p.Param#> = (<#=p.Type#>)p_<#=p.Param#>.Value;
<#}#>
<#}#>
<#if (sp.Results.Count > 0) {#>
            // Map using AutoMapper
            // var listResult = _mapper.Map<List<ClassNameDto>>(listData);
            // Map using AgileMapper
            // var listResult = Mapper.Map(listData).ToANew<List<ClassNameDto>>();
            // Return
            // return listResult;
            return listData;
<#}#>
        }
<# }#>
        #endregion

        #region xu ly ben services cach 2 dung FromSqlInterpolated || ExecuteSqlInterpolatedAsync
<# foreach (var sp in SpList){ #>
        <#=sp.GetMethodDefinition()#>_C2(<# foreach (var p in sp.Params){ #><#=(p.Order == "1" ? "" : "," )#><#=(p.isOutput ? "ref " : "" )#><#=p.Type#> <#=p.Param#><#}#>)
        {
<#if (sp.Results.Count > 0){#>
            // Parameters
<# foreach (var p in sp.Params){ #>
            var p_<#=p.Param#> = <#=p.Param#> ?? (object)DBNull.Value;
<# }#>
<#}#>
            // Processing 
            FormattableString sqlQuery = $@"EXEC [<#=sp.Schema#>].[<#=sp.Name#>] <# foreach (var p in sp.Params){ #><#=(p.Order == "1" ? "" : ", " )#>@<#=p.Param#>={p_<#=p.Param#>}<#=(p.isOutput ? " OUTPUT" : "" )#><#}#>";
        
<#if (sp.Results.Count > 0) {#>
            //Output Data
            List<<#=sp.Name#>> listData = await _dbContext.<#=sp.Name#>
            .FromSqlInterpolated(sqlQuery)
            .ToListAsync();
<#}#>
<#else{#>
            //Execution
            await _dbContext.Database.ExecuteSqlInterpolatedAsync(sqlQuery <# foreach (var p in sp.Params){ #>, p_<#=p.Param#> <#}#>);
<#}#>
<#if (sp.Params.Where(x=> x.isOutput).Count() > 0) {#>
            //Output Params
<# foreach (var p in sp.Params.Where(x=> x.isOutput)){ #>        <#=p.Param#> = (<#=p.Type#>)p_<#=p.Param#>.Value;
<#}#>
<#}#>            
<#if (sp.Results.Count > 0) {#>
            // Map using AutoMapper
            // var listResult = _mapper.Map<List<ClassNameDto>>(listData);
            // Map using AgileMapper
            // var listResult = Mapper.Map(listData).ToANew<List<ClassNameDto>>();
            // Return
            // return listResult;
            return listData;
<#}#>
            }
<# }#>
        // ====================================end services============================================
        #endregion
        // ====================================Model or Dto============================================
        #region Model
<# foreach (var sp in SpList){ if (sp.Results.Count > 0){#>
        public partial class <#=sp.Name#>
        {
<# foreach (var r in sp.Results){#>
            public <#=r.Type#> <#=r.Name#> { get; set; }
<# }#>
        }
<# }}#>
        #endregion
   

        #region Dto 
<# foreach (var sp in SpList){ if (sp.Results.Count > 0){#>
        public class <#=sp.Name#>
        {
<# foreach (var r in sp.Results){#>
            public <#=r.Type#> <#=sp.ConvertToStandardPropertyName(r.Name)#> { get; set; }
<# }#>
        }
<# }}#>
        #endregion

  }
}