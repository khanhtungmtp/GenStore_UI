///
/// Generated by <#=ProgramName#>(MTP) on <#=DateTime.Now#>
///

<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
using System;
using System.Data;
using System.Collections.Generic;
using Microsoft.Data.SqlClient;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;

namespace <#=Namespace#>.<#=SolutionDestinationFolder#>
{
    public partial class <#=DestinationDbContext#> : <#=SourceDbContext#>
    {
<# foreach (var sp in SpList){ if (sp.Results.Count > 0) {#>
        private DbSet<<#=sp.Name#>> <#=sp.Name#> { get; set; }
        private readonly DBContext _context;
<# }}#>

        public <#=DestinationDbContext#>(DBContext context)
        {
           _context = context;
        }

        public <#=DestinationDbContext#>(DbContextOptions<<#=SourceDbContext#>> options)
            : base(options)
        {
        }               

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {                                 
            // No key   
<#    foreach (var sp in SpList){ if (sp.Results.Count > 0){#>
            modelBuilder.Query<<#=sp.Name#>>().HasNoKey();
<#    }}#>            
            base.OnModelCreating(modelBuilder);
        }
// ====================================start services============================================
        // xu ly ben services cach 1 dung FromSqlRaw || ExecuteSqlRawAsync
<# foreach (var sp in SpList){ #>
        <#=sp.GetMethodDefinition()#>_c1(<# foreach (var p in sp.Params){#><#=(p.Order == "1" ? "" : "," )#><#=(p.isOutput ? "ref " : "" )#><#=p.Type#> <#=p.Param#><#}#>)
        {
<#if (sp.Results.Count > 0){#>
            //Initialize Result 
            List<<#=sp.Name#>> listResult = new List<<#=sp.Name#>>();
<#}#>
<#if (sp.Params.Count > 0) {#>
            // Parameters
<# foreach (var p in sp.Params){ #>
            SqlParameter p_<#=p.Param#> = new SqlParameter("@<#=p.Param#>", <#=p.Param#> ?? (object)DBNull.Value);
<# }#><#}#>           
            // Processing 
            string sqlQuery = $@"EXEC [<#=sp.Schema#>].[<#=sp.Name#>] <# foreach (var p in sp.Params){ #><#=(p.Order == "1" ? "" : ", " )#>@<#=p.Param#><#=(p.isOutput ? " OUTPUT" : "" )#><#}#>";
<#if (sp.Results.Count > 0) {#>
                
            //Output Data
            listResult = await _context.<#=sp.Name#>.FromSqlRaw(sqlQuery <# foreach (var p in sp.Params){ #>, p_<#=p.Param#> <#}#>).ToListAsync();<#}#>
<#        else{#>
            //Execution
           await _context.Database.ExecuteSqlRawAsync(sqlQuery <# foreach (var p in sp.Params){ #>, p_<#=p.Param#> <#}#>);<#}#>

<#if (sp.Params.Where(x=> x.isOutput).Count() > 0) {#>
                
            //Output Params
<# foreach (var p in sp.Params.Where(x=> x.isOutput)){ #>                <#=p.Param#> = (<#=p.Type#>)p_<#=p.Param#>.Value;
<#}#>
<#}#>
     
<#if (sp.Results.Count > 0) {#>
            //Return
            return listResult;
<#}#>
        }

<# }#>
        // xu ly ben services cach 2 dung FromSqlInterpolated || ExecuteSqlInterpolatedAsync
<# foreach (var sp in SpList){ #>
        <#=sp.GetMethodDefinition()#>_c2(<# foreach (var p in sp.Params){ #><#=(p.Order == "1" ? "" : "," )#><#=(p.isOutput ? "ref " : "" )#><#=p.Type#> <#=p.Param#><#}#>)
        {
<#if (sp.Results.Count > 0){#>
            //Initialize Result 
            List<<#=sp.Name#>> listResult = new List<<#=sp.Name#>>();
            // Parameters
<# foreach (var p in sp.Params){ #>
            var p_<#=p.Param#> = <#=p.Param#> ?? (object)DBNull.Value;
<# }#>
<#}#>
            // Processing 
            FormattableString sqlQuery = $@"EXEC [<#=sp.Schema#>].[<#=sp.Name#>] <# foreach (var p in sp.Params){ #><#=(p.Order == "1" ? "" : ", " )#>@<#=p.Param#>={p_<#=p.Param#>}<#=(p.isOutput ? " OUTPUT" : "" )#><#}#>";
        
<#if (sp.Results.Count > 0) {#>
            //Output Data
            listResult = await _context.<#=sp.Name#>
            .FromSqlInterpolated(sqlQuery)
            .ToListAsync();
<#}#>
<#else{#>
            //Execution
            await _context.Database.ExecuteSqlInterpolatedAsync(sqlQuery <# foreach (var p in sp.Params){ #>, p_<#=p.Param#> <#}#>);
<#}#>

<#if (sp.Params.Where(x=> x.isOutput).Count() > 0) {#>
            //Output Params
<# foreach (var p in sp.Params.Where(x=> x.isOutput)){ #>        <#=p.Param#> = (<#=p.Type#>)p_<#=p.Param#>.Value;
<#}#>
<#}#>
            
<#if (sp.Results.Count > 0) {#>
        //Return
        return listResult;
<#}#>
    }

<# }#>
// ====================================end services============================================


// ====================================model or Dto============================================
<# foreach (var sp in SpList){ if (sp.Results.Count > 0){#>
        public class <#=sp.Name#>
        {
<# foreach (var r in sp.Results){#>
            public <#=r.Type#> <#=r.Name#> { get; set; }
<# }#>
        }

<# }}#>
    }
}